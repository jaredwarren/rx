// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// recipe service
//
// Command:
// $ goa gen github.com/jaredwarren/rx/design

package recipe

import (
	"context"

	recipeviews "github.com/jaredwarren/rx/gen/recipe/views"
)

// The recipe service retrieves recipes.
type Service interface {
	// List recipes
	List(context.Context) (res RxRecipeCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "recipe"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"list"}

// RxRecipeCollection is the result type of the recipe service list method.
type RxRecipeCollection []*RxRecipe

// A recipe
type RxRecipe struct {
	// Unique recipe ID
	ID string
	// Recipe Title
	Title string
	// Long description of recipe
	Description *string
	// Version Number e.g. 1.0.1
	Version *string
	// List of ingredients
	Ingredients *IngredientList
	// Is a favorite, basically a tag
	Favorite *bool
	// rating between 0-1
	Rating *float32
	// rating between 0-1
	Difficulty *float32
	// e.g. chopped, sliced, etc.. might need to be array.
	State *string
	// If it's been added/included
	Complete *bool
}

type IngredientList struct {
	// List of ingredients
	Ingredients []*Ingredient
}

type Ingredient struct {
	Recipe *RxRecipe
	// TODO: make UnitOfMeasure
	Quantity *string
}

// NewRxRecipeCollection initializes result type RxRecipeCollection from viewed
// result type RxRecipeCollection.
func NewRxRecipeCollection(vres recipeviews.RxRecipeCollection) RxRecipeCollection {
	var res RxRecipeCollection
	switch vres.View {
	case "default", "":
		res = newRxRecipeCollection(vres.Projected)
	case "tiny":
		res = newRxRecipeCollectionTiny(vres.Projected)
	case "ingredient":
		res = newRxRecipeCollectionIngredient(vres.Projected)
	}
	return res
}

// NewViewedRxRecipeCollection initializes viewed result type
// RxRecipeCollection from result type RxRecipeCollection using the given view.
func NewViewedRxRecipeCollection(res RxRecipeCollection, view string) recipeviews.RxRecipeCollection {
	var vres recipeviews.RxRecipeCollection
	switch view {
	case "default", "":
		p := newRxRecipeCollectionView(res)
		vres = recipeviews.RxRecipeCollection{p, "default"}
	case "tiny":
		p := newRxRecipeCollectionViewTiny(res)
		vres = recipeviews.RxRecipeCollection{p, "tiny"}
	case "ingredient":
		p := newRxRecipeCollectionViewIngredient(res)
		vres = recipeviews.RxRecipeCollection{p, "ingredient"}
	}
	return vres
}

// newRxRecipeCollection converts projected type RxRecipeCollection to service
// type RxRecipeCollection.
func newRxRecipeCollection(vres recipeviews.RxRecipeCollectionView) RxRecipeCollection {
	res := make(RxRecipeCollection, len(vres))
	for i, n := range vres {
		res[i] = newRxRecipe(n)
	}
	return res
}

// newRxRecipeCollectionTiny converts projected type RxRecipeCollection to
// service type RxRecipeCollection.
func newRxRecipeCollectionTiny(vres recipeviews.RxRecipeCollectionView) RxRecipeCollection {
	res := make(RxRecipeCollection, len(vres))
	for i, n := range vres {
		res[i] = newRxRecipeTiny(n)
	}
	return res
}

// newRxRecipeCollectionIngredient converts projected type RxRecipeCollection
// to service type RxRecipeCollection.
func newRxRecipeCollectionIngredient(vres recipeviews.RxRecipeCollectionView) RxRecipeCollection {
	res := make(RxRecipeCollection, len(vres))
	for i, n := range vres {
		res[i] = newRxRecipeIngredient(n)
	}
	return res
}

// newRxRecipeCollectionView projects result type RxRecipeCollection into
// projected type RxRecipeCollectionView using the "default" view.
func newRxRecipeCollectionView(res RxRecipeCollection) recipeviews.RxRecipeCollectionView {
	vres := make(recipeviews.RxRecipeCollectionView, len(res))
	for i, n := range res {
		vres[i] = newRxRecipeView(n)
	}
	return vres
}

// newRxRecipeCollectionViewTiny projects result type RxRecipeCollection into
// projected type RxRecipeCollectionView using the "tiny" view.
func newRxRecipeCollectionViewTiny(res RxRecipeCollection) recipeviews.RxRecipeCollectionView {
	vres := make(recipeviews.RxRecipeCollectionView, len(res))
	for i, n := range res {
		vres[i] = newRxRecipeViewTiny(n)
	}
	return vres
}

// newRxRecipeCollectionViewIngredient projects result type RxRecipeCollection
// into projected type RxRecipeCollectionView using the "ingredient" view.
func newRxRecipeCollectionViewIngredient(res RxRecipeCollection) recipeviews.RxRecipeCollectionView {
	vres := make(recipeviews.RxRecipeCollectionView, len(res))
	for i, n := range res {
		vres[i] = newRxRecipeViewIngredient(n)
	}
	return vres
}

// newRxRecipe converts projected type RxRecipe to service type RxRecipe.
func newRxRecipe(vres *recipeviews.RxRecipeView) *RxRecipe {
	res := &RxRecipe{
		Description: vres.Description,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	return res
}

// newRxRecipeTiny converts projected type RxRecipe to service type RxRecipe.
func newRxRecipeTiny(vres *recipeviews.RxRecipeView) *RxRecipe {
	res := &RxRecipe{
		Description: vres.Description,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	return res
}

// newRxRecipeIngredient converts projected type RxRecipe to service type
// RxRecipe.
func newRxRecipeIngredient(vres *recipeviews.RxRecipeView) *RxRecipe {
	res := &RxRecipe{}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	return res
}

// newRxRecipeView projects result type RxRecipe into projected type
// RxRecipeView using the "default" view.
func newRxRecipeView(res *RxRecipe) *recipeviews.RxRecipeView {
	vres := &recipeviews.RxRecipeView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
	}
	return vres
}

// newRxRecipeViewTiny projects result type RxRecipe into projected type
// RxRecipeView using the "tiny" view.
func newRxRecipeViewTiny(res *RxRecipe) *recipeviews.RxRecipeView {
	vres := &recipeviews.RxRecipeView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
	}
	return vres
}

// newRxRecipeViewIngredient projects result type RxRecipe into projected type
// RxRecipeView using the "ingredient" view.
func newRxRecipeViewIngredient(res *RxRecipe) *recipeviews.RxRecipeView {
	vres := &recipeviews.RxRecipeView{
		Title: &res.Title,
	}
	return vres
}
