// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// recipe HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jaredwarren/rx/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	recipe "github.com/jaredwarren/rx/gen/recipe"
	recipeviews "github.com/jaredwarren/rx/gen/recipe/views"
	goahttp "goa.design/goa/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "recipe" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListRecipePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("recipe", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the recipe
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("recipe", "list", err)
			}
			p := NewListRxRecipeCollectionOK(body)
			view := "tiny"
			vres := recipeviews.RxRecipeCollection{p, view}
			if err = vres.Validate(); err != nil {
				return nil, goahttp.ErrValidationError("recipe", "list", err)
			}
			return recipe.NewRxRecipeCollection(vres), nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("recipe", "list", resp.StatusCode, string(body))
		}
	}
}

// marshalIngredientListResponseBodyToIngredientListView builds a value of type
// *recipeviews.IngredientListView from a value of type
// *IngredientListResponseBody.
func marshalIngredientListResponseBodyToIngredientListView(v *IngredientListResponseBody) *recipeviews.IngredientListView {
	if v == nil {
		return nil
	}
	res := &recipeviews.IngredientListView{}
	if v.Ingredients != nil {
		res.Ingredients = make([]*recipeviews.IngredientView, len(v.Ingredients))
		for j, val := range v.Ingredients {
			res.Ingredients[j] = &recipeviews.IngredientView{
				Quantity: val.Quantity,
			}
			if val.Recipe != nil {
				res.Ingredients[j].Recipe = marshalRxRecipeResponseBodyToRxRecipeView(val.Recipe)
			}
		}
	}

	return res
}

// marshalRxRecipeResponseBodyToRxRecipeView builds a value of type
// *recipeviews.RxRecipeView from a value of type *RxRecipeResponseBody.
func marshalRxRecipeResponseBodyToRxRecipeView(v *RxRecipeResponseBody) *recipeviews.RxRecipeView {
	if v == nil {
		return nil
	}
	res := &recipeviews.RxRecipeView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Version:     v.Version,
		Favorite:    v.Favorite,
		Rating:      v.Rating,
		Difficulty:  v.Difficulty,
		State:       v.State,
		Complete:    v.Complete,
	}
	if v.Ingredients != nil {
		res.Ingredients = marshalIngredientListResponseBodyToIngredientListView(v.Ingredients)
	}

	return res
}
